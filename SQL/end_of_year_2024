1.0 comparing amazon and ebay
			COMPLETED - sales per month chart comparing between amazon and ebay
SELECT EXTRACT(MONTH FROM e.date) AS month, e.part_crib_ordered_product_sales, e.industrial_superstore_ordered_product_sales, 
(e.part_crib_ordered_product_sales + e.industrial_superstore_ordered_product_sales)::numeric AS ebay_combined, 
a.ordered_product_sales AS global_fuses_ordered_product_sales,
CASE WHEN EXTRACT(MONTH FROM e.date) = 1 THEN 'January'
	WHEN EXTRACT(MONTH FROM e.date) = 2 THEN 'February'
	WHEN EXTRACT(MONTH FROM e.date) = 3 THEN 'March'
	WHEN EXTRACT(MONTH FROM e.date) = 4 THEN 'April'
	WHEN EXTRACT(MONTH FROM e.date) = 5 THEN 'May'
	WHEN EXTRACT(MONTH FROM e.date) = 6 THEN 'June'
	WHEN EXTRACT(MONTH FROM e.date) = 7 THEN 'July'
	WHEN EXTRACT(MONTH FROM e.date) = 8 THEN 'August'
	WHEN EXTRACT(MONTH FROM e.date) = 9 THEN 'September'
	WHEN EXTRACT(MONTH FROM e.date) = 10 THEN 'October'
	WHEN EXTRACT(MONTH FROM e.date) = 11 THEN 'November'
	WHEN EXTRACT(MONTH FROM e.date) = 12 THEN 'December'
	ELSE null
END AS month_converted
FROM ebay_combined_monthly_sales AS e
LEFT JOIN global_fuses_monthly_sales AS a ON e.date = a.date;


2.0 analyzing amazon
		COMPLETED - multiple purchases per order looking at which ads have the largest differences between units ordered and total order items,
SELECT title, units_ordered, total_order_items,  ROUND((units_ordered::numeric / total_order_items::numeric), 2) AS avg_units_per_order
FROM public.global_fuses_item_sales
WHERE total_order_items > 9
ORDER BY avg_units_per_order DESC
LIMIT 10;

		COMPLETED lowest units per order 
SELECT title, asin, units_ordered, total_order_items,  ROUND((units_ordered::numeric / total_order_items::numeric), 2) AS avg_units_per_order
FROM public.global_fuses_item_sales
WHERE total_order_items > 9
AND LOWER(title) NOT LIKE '%pack%'
AND LOWER(title) NOT LIKE'%pk%'
AND LOWER(title) NOT LIKE '%box%'
AND LOWER(title) NOT LIKE '%lot%'
AND ROUND((units_ordered::numeric / total_order_items::numeric), 2) < 2
ORDER BY avg_units_per_order;


		INCOMPLETE - top selling items joined with all_listings_report to show current price , REMOVE DUPLICATE
SELECT title, units_ordered, ordered_product_sales, alr.price AS current_price
FROM global_fuses_item_sales AS i_s
LEFT JOIN global_fuses_all_listings_report AS alr ON i_s.asin = alr.asin
ORDER BY ordered_product_sales DESC
LIMIT 50;


			COMPLETED - global_fuses_orders - map of all sales
WITH ship_state_clean AS
(SELECT amazon_order_id, UPPER(ship_state) AS ship_state,
CASE UPPER(ship_state) 
	WHEN 'ALABAMA' THEN 'AL' 
	WHEN 'ALASKA' THEN 'AK'
	WHEN 'ARIZONA' THEN 'AZ' 
	WHEN 'ARKANSAS' THEN 'AR'  
 	WHEN 'CALIFORNIA' THEN 'CA'
	WHEN 'COLORADO' THEN 'CO'
	WHEN 'CONNECTICUT' THEN 'CT'
	WHEN 'DELAWARE' THEN 'DE'
	WHEN 'DISTRICT OF COLUMBIA' THEN 'DC'
	WHEN 'FLORIDA' THEN 'FL'
	WHEN 'GEORGIA' THEN 'GA'
	WHEN 'HAWAII' THEN 'HI'
	WHEN 'IDAHO' THEN 'ID'
	WHEN 'ILLINOIS' THEN 'IL'
	WHEN 'INDIANA' THEN 'IN' 
	WHEN 'IOWA' THEN 'IA' 
	WHEN 'KANSAS' THEN 'KS' 
	WHEN 'KENTUCKY' THEN 'KY' 
	WHEN 'LOUISIANA' THEN 'LA'
	WHEN 'MAINE' THEN 'ME' 
	WHEN 'MARYLAND' THEN 'MD' 
	WHEN 'MASSACHUSETTS' THEN 'MA'
	WHEN 'MICHIGAN' THEN 'MI' 
	WHEN 'MINNESOTA' THEN 'MN'
	WHEN 'MISSISSIPPI' THEN 'MS'
	WHEN 'MISSOURI' THEN 'MO'
	WHEN 'MONTANA' THEN 'MT' 
	WHEN 'NEBRASKA' THEN 'NE' 
	WHEN 'NEVADA' THEN 'NV' 
	WHEN 'NEW HAMPSHIRE' THEN 'NH'
	WHEN 'NEW JERSEY' THEN 'NJ' 
	WHEN 'NEW MEXICO' THEN 'NM' 
	WHEN 'NEW YORK' THEN 'NY' 
	WHEN 'NORTH CAROLINA' THEN 'NC' 
	WHEN 'NORTH DAKOTA' THEN 'ND' 
	WHEN 'OHIO' THEN 'OH' 
	WHEN 'OKLAHOMA' THEN 'OK' 
	WHEN 'OREGON' THEN 'OR' 
	WHEN 'PENNSYLVANIA' THEN 'PA'
	WHEN 'RHODE ISLAND' THEN 'RI' 
	WHEN 'SOUTH CAROLINA' THEN 'SC' 
	WHEN 'SOUTH DAKOTA' THEN 'SD' 
	WHEN 'TENNESSEE' THEN 'TN'
	WHEN 'TEXAS' THEN 'TX' 
	WHEN 'UTAH' THEN 'UT' 
	WHEN 'VERMONT' THEN 'VT' 
	WHEN 'VIRGINIA' THEN 'VA' 
	WHEN 'WASHINGTON' THEN 'WA' 
	WHEN 'WEST VIRGINIA' THEN 'WV' 
	WHEN 'WISCONSIN' THEN 'WI' 
	WHEN 'WYOMING' THEN 'WY'
	WHEN 'PUERTO RICO' THEN 'PR'
	WHEN 'CA.' THEN 'CA'
	WHEN 'N.Y.' THEN 'NY'
	WHEN 'N.C.' THEN 'NC'
	WHEN 'MI.' THEN 'MI'
	WHEN 'N.J.' THEN 'NJ'
	ELSE UPPER(ship_state)
END AS ship_state_cleaned
FROM global_fuses_orders
GROUP BY ship_state, amazon_order_id)

SELECT ship_state_cleaned, COUNT(ship_state_cleaned)
FROM ship_state_clean
GROUP BY ship_state_cleaned
ORDER BY COUNT(ship_state_cleaned) DESC;

`
COMPLETED - global_fuses_sales_by_day - average sale per order per month, average number of orders per day per month, total sales per month
SELECT EXTRACT(MONTH FROM date) AS month, 
ROUND(AVG(average_sales_per_order_item)::numeric, 2) AS avg_sales_per_order, 
ROUND((SUM(ordered_product_sales::numeric) / COUNT(*)), 2) AS avg_sales_per_day,
ROUND((SUM(total_order_items::numeric) / COUNT(*)), 2) AS avg_orders_per_day,
ROUND(SUM(ordered_product_sales::numeric), 2) AS total_sales,
CASE WHEN EXTRACT(MONTH FROM date) = 1 THEN 'January'
	WHEN EXTRACT(MONTH FROM date) = 2 THEN 'February'
	WHEN EXTRACT(MONTH FROM date) = 3 THEN 'March'
	WHEN EXTRACT(MONTH FROM date) = 4 THEN 'April'
	WHEN EXTRACT(MONTH FROM date) = 5 THEN 'May'
	WHEN EXTRACT(MONTH FROM date) = 6 THEN 'June'
	WHEN EXTRACT(MONTH FROM date) = 7 THEN 'July'
	WHEN EXTRACT(MONTH FROM date) = 8 THEN 'August'
	WHEN EXTRACT(MONTH FROM date) = 9 THEN 'September'
	WHEN EXTRACT(MONTH FROM date) = 10 THEN 'October'
	WHEN EXTRACT(MONTH FROM date) = 11 THEN 'November'
	WHEN EXTRACT(MONTH FROM date) = 12 THEN 'December'
	ELSE null
END AS month_converted
FROM global_fuses_sales_by_day
GROUP BY month_converted, month
ORDER BY month;


2.0 analyzing ebay
		COMPLETE - part_crib_listings_sales_report - 50 top selling items
SELECT *
FROM part_crib_listings_sales_report
ORDER BY item_sales DESC
LIMIT 50;


		COMPLETE - industrial_superstore_listings_sales_report - top selling items
SELECT *
FROM industrial_superstore_listings_sales_report
ORDER BY item_sales DESC
LIMIT 50;


			COMPLETE - part_crib_orders - map of states who made purchases 
SELECT UPPER(buyer_state), COUNT(buyer_state)
FROM part_crib_orders
GROUP BY UPPER(buyer_state), buyer_country
HAVING buyer_country = 'United States'
ORDER BY COUNT(buyer_state) DESC;


		COMPLETE - list of top buyers per unique order id
WITH usernames AS
(SELECT DISTINCT order_number, buyer_username, total_price
FROM part_crib_orders)

SELECT buyer_username, COUNT(buyer_username) AS orders, ROUND( SUM(total_price)::numeric, 2) as total
FROM usernames
GROUP BY buyer_username
ORDER BY COUNT(buyer_username) DESC
LIMIT 10;


		COMPLETE - summary - part crib
SELECT ROUND(AVG(total_price::numeric), 2) AS avg_sale_per_order, 
COUNT (DISTINCT order_number) AS total_orders,
ROUND(SUM(total_price::numeric), 2) AS total_sales
FROM industrial_superstore_orders;


		COMPLETE - list of top buyers per unique order id
WITH usernames AS
(SELECT DISTINCT order_number, buyer_username, total_price
FROM industrial_superstore_orders)

SELECT buyer_username, COUNT(buyer_username) AS orders, ROUND( SUM(total_price)::numeric, 2) as total
FROM usernames
GROUP BY buyer_username
ORDER BY COUNT(buyer_username) DESC
LIMIT 10;

		COMPLETE - summary - industrial superstore
SELECT ROUND(AVG(total_price::numeric), 2) AS avg_sale_per_order, 
COUNT (DISTINCT order_number) AS total_orders,
ROUND(SUM(total_price::numeric), 2) AS total_sales
FROM industrial_superstore_orders;
