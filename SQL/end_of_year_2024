1.0 comparing amazon and ebay
sales per month chart comparing between amazon and ebay
SELECT EXTRACT(MONTH FROM e.date) AS month, e.part_crib_ordered_product_sales, e.industrial_superstore_ordered_product_sales, 
(e.part_crib_ordered_product_sales + e.industrial_superstore_ordered_product_sales)::numeric AS ebay_combined, 
a.ordered_product_sales AS global_fuses_ordered_product_sales,
CASE WHEN EXTRACT(MONTH FROM e.date) = 1 THEN 'January'
	WHEN EXTRACT(MONTH FROM e.date) = 2 THEN 'February'
	WHEN EXTRACT(MONTH FROM e.date) = 3 THEN 'March'
	WHEN EXTRACT(MONTH FROM e.date) = 4 THEN 'April'
	WHEN EXTRACT(MONTH FROM e.date) = 5 THEN 'May'
	WHEN EXTRACT(MONTH FROM e.date) = 6 THEN 'June'
	WHEN EXTRACT(MONTH FROM e.date) = 7 THEN 'July'
	WHEN EXTRACT(MONTH FROM e.date) = 8 THEN 'August'
	WHEN EXTRACT(MONTH FROM e.date) = 9 THEN 'September'
	WHEN EXTRACT(MONTH FROM e.date) = 10 THEN 'October'
	WHEN EXTRACT(MONTH FROM e.date) = 11 THEN 'November'
	WHEN EXTRACT(MONTH FROM e.date) = 12 THEN 'December'
	ELSE null
END AS month_converted
FROM ebay_combined_monthly_sales AS e
LEFT JOIN global_fuses_monthly_sales AS a ON e.date = a.date;


2.0 analyzing amazon
global_fuses_all_listings_report - average price of our listings / bar chart with number of listings between metrics
SELECT price
FROM public.global_fuses_all_listings_report;


global_fuses_item_sales - correlation between buy box percentage and number of sales among items with a high quantity and similar sales rank (more data required), CONTROL FOR SALES RANK 
SELECT price_category, corr(buy_box_percentage, units_ordered) AS box_corr, COUNT(price_category)
FROM (SELECT i_s.title, i_s.buy_box_percentage, i_s.units_ordered, alr.price::numeric,
CASE WHEN alr.price BETWEEN 0.00 AND 4.99 THEN 0
	WHEN alr.price BETWEEN 5.00 AND 9.99 THEN 1
	WHEN alr.price BETWEEN 10.00 AND 14.99 THEN 2
	WHEN alr.price BETWEEN 15.00 AND 19.99 THEN 3
	ELSE NULL
END AS price_category
FROM global_fuses_item_sales AS i_s
LEFT JOIN global_fuses_all_listings_report AS alr ON i_s.asin = alr.asin
WHERE alr.quantity > 49
AND alr.price < 20.00)
GROUP BY price_category
ORDER BY price_category;

multiple purchases per order looking at which ads have the largest differences between units ordered and total order items,
SELECT title, units_ordered, total_order_items, (units_ordered - total_order_items) AS units_vs_orders
FROM public.global_fuses_item_sales
ORDER BY units_vs_orders DESC;

top selling items joined with all_listings_report to show current price 
SELECT title, units_ordered, ordered_product_sales, alr.price AS current_price
FROM global_fuses_item_sales AS i_s
LEFT JOIN global_fuses_all_listings_report AS alr ON i_s.asin = alr.asin
ORDER BY ordered_product_sales DESC;


global_fuses_orders - map of all sales
WITH ship_state_clean AS
(SELECT amazon_order_id, UPPER(ship_state) AS ship_state,
CASE UPPER(ship_state) 
	WHEN 'ALABAMA' THEN 'AL' 
	WHEN 'ALASKA' THEN 'AK'
	WHEN 'ARIZONA' THEN 'AZ' 
	WHEN 'ARKANSAS' THEN 'AR'  
 	WHEN 'CALIFORNIA' THEN 'CA'
	WHEN 'COLORADO' THEN 'CO'
	WHEN 'CONNECTICUT' THEN 'CT'
	WHEN 'DELAWARE' THEN 'DE'
	WHEN 'DISTRICT OF COLUMBIA' THEN 'DC'
	WHEN 'FLORIDA' THEN 'FL'
	WHEN 'GEORGIA' THEN 'GA'
	WHEN 'HAWAII' THEN 'HI'
	WHEN 'IDAHO' THEN 'ID'
	WHEN 'ILLINOIS' THEN 'IL'
	WHEN 'INDIANA' THEN 'IN' 
	WHEN 'IOWA' THEN 'IA' 
	WHEN 'KANSAS' THEN 'KS' 
	WHEN 'KENTUCKY' THEN 'KY' 
	WHEN 'LOUISIANA' THEN 'LA'
	WHEN 'MAINE' THEN 'ME' 
	WHEN 'MARYLAND' THEN 'MD' 
	WHEN 'MASSACHUSETTS' THEN 'MA'
	WHEN 'MICHIGAN' THEN 'MI' 
	WHEN 'MINNESOTA' THEN 'MN'
	WHEN 'MISSISSIPPI' THEN 'MS'
	WHEN 'MISSOURI' THEN 'MO'
	WHEN 'MONTANA' THEN 'MT' 
	WHEN 'NEBRASKA' THEN 'NE' 
	WHEN 'NEVADA' THEN 'NV' 
	WHEN 'NEW HAMPSHIRE' THEN 'NH'
	WHEN 'NEW JERSEY' THEN 'NJ' 
	WHEN 'NEW MEXICO' THEN 'NM' 
	WHEN 'NEW YORK' THEN 'NY' 
	WHEN 'NORTH CAROLINA' THEN 'NC' 
	WHEN 'NORTH DAKOTA' THEN 'ND' 
	WHEN 'OHIO' THEN 'OH' 
	WHEN 'OKLAHOMA' THEN 'OK' 
	WHEN 'OREGON' THEN 'OR' 
	WHEN 'PENNSYLVANIA' THEN 'PA'
	WHEN 'RHODE ISLAND' THEN 'RI' 
	WHEN 'SOUTH CAROLINA' THEN 'SC' 
	WHEN 'SOUTH DAKOTA' THEN 'SD' 
	WHEN 'TENNESSEE' THEN 'TN'
	WHEN 'TEXAS' THEN 'TX' 
	WHEN 'UTAH' THEN 'UT' 
	WHEN 'VERMONT' THEN 'VT' 
	WHEN 'VIRGINIA' THEN 'VA' 
	WHEN 'WASHINGTON' THEN 'WA' 
	WHEN 'WEST VIRGINIA' THEN 'WV' 
	WHEN 'WISCONSIN' THEN 'WI' 
	WHEN 'WYOMING' THEN 'WY'
	WHEN 'PUERTO RICO' THEN 'PR'
	WHEN 'CA.' THEN 'CA'
	WHEN 'N.Y.' THEN 'NY'
	WHEN 'N.C.' THEN 'NC'
	WHEN 'MI.' THEN 'MI'
	WHEN 'N.J.' THEN 'NJ'
	ELSE UPPER(ship_state)
END AS ship_state_cleaned
FROM global_fuses_orders
GROUP BY ship_state, amazon_order_id)

SELECT ship_state_cleaned, COUNT(ship_state_cleaned)
FROM ship_state_clean
GROUP BY ship_state_cleaned
ORDER BY COUNT(ship_state_cleaned) DESC;


global_fuses_sales_by_day - average sale per order 
SELECT AVG(average_sales_per_order_item)
FROM global_fuses_sales_by_day;

average number of orders per day per month

average sales per day per month


2.0 analyzing ebay
part_crib_listings_sales_report - top selling items
SELECT *
FROM part_crib_listings_sales_report
ORDER BY item_sales DESC;


industrial_superstore_listings_sales_report - top selling items
SELECT *
FROM industrial_superstore_listings_sales_report
ORDER BY item_sales DESC;


part_crib_orders - map of states who made purchases 
SELECT UPPER(buyer_state), COUNT(buyer_state)
FROM part_crib_orders
GROUP BY UPPER(buyer_state), buyer_country
HAVING buyer_country = 'United States'
ORDER BY COUNT(buyer_state) DESC;

list of top buyers per unique order id
WITH usernames AS
(SELECT DISTINCT order_number, buyer_username, total_price
FROM part_crib_orders)

SELECT buyer_username, COUNT(buyer_username) AS orders, ROUND( SUM(total_price)::numeric, 2) as total
FROM usernames
GROUP BY buyer_username
ORDER BY COUNT(buyer_username) DESC;

average sale per order
SELECT AVG(total_price)
FROM part_crib_orders;

industrial_superstore_orders - map of states who made purchases
SELECT UPPER(buyer_state), COUNT(buyer_state)
FROM industrial_superstore_orders
GROUP BY UPPER(buyer_state), buyer_country
HAVING buyer_country = 'United States'
ORDER BY COUNT(buyer_state) DESC;

list of top buyers per unique order id
WITH usernames AS
(SELECT DISTINCT order_number, buyer_username, total_price
FROM industrial_superstore_orders)

SELECT buyer_username, COUNT(buyer_username) AS orders, ROUND( SUM(total_price)::numeric, 2) as total
FROM usernames
GROUP BY buyer_username
ORDER BY COUNT(buyer_username) DESC;

average sale per order
SELECT AVG(total_price)
FROM industrial_superstore_orders;






NOTES TO LOOK INTO
GLOBAL FUSES
global_fuses_all_listings_report - average price of our listings / bar chart with number of listings between metrics

global_fuses_item_sales - correlation between buy box percentage and number of sales, multiple purchases per order looking at which ads have the largest differences between units ordered and total order items,
  top selling items joined with all_listings_report to show current price 

global_fuses_orders - map of all sales

global_fuses_sales_by_day - average sale per order, average number of units ordered, average price per unit, average sales per day per month


EBAY
industrial_superstore_listings_sales_report - top selling items

part_crib_listings_sales_report - top selling items

industrial_superstore_orders - map of states who made purchases, list of top buyers per unique order id, average sale per order

part_crib_orders - map of states who made purchases, list of top buyers per unique order id, average sale per order










